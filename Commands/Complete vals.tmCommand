<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby

require "#{ENV['TM_SUPPORT_PATH']}/lib/ocamlcompletion"
require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"

$contents = $stdin.read
$line = ENV['TM_CURRENT_LINE']
$linepos = ENV['TM_LINE_INDEX'].to_i


class Array
  def map_i(&amp;block)
    accum = []
    self.each_index do |i|
      accum &lt;&lt; yield(i, self[i])
    end
    accum
  end
end


def extract_module_from_line
  accum = []
  start = [($linepos - 1), 0].max
  start.downto(0) do |i|
    if $line[i].chr !~ /[A-Za-z_.]/
      break
    end
    accum &lt;&lt; $line[i].chr
  end
  
  full = accum.reverse.join
  if full[-1] == '.'
    [full.chomp('.'), /^/]
  else
    matches = /^(.*?)\.([^.]*)$/.match(full)
    if matches
      [matches[1].to_s, /^#{Regexp.escape(matches[2].to_s)}/]
    else
      ["", /^#{Regexp.escape(full)}/]
    end
  end
end


def convert_to_snippet(str, stripregex)
  matches = /^(\S+)\s+:\s+(.*)$/.match(str)
  funname = matches[1]
  args = []
  depth = 0
  last = 'a'
  token = []
  matches[2].each_byte do |b|
    c = b.chr
    case c
    when '('
      token &lt;&lt; c
      depth += 1
    when ')'
      token &lt;&lt; c
      depth -= 1
    when '&gt;'
      if last == '-' and depth == 0
        args &lt;&lt; (token.join.chomp('-').strip + ' -&gt;')
        token = []
      else
        token &lt;&lt; c
      end
    else
      token &lt;&lt; c
    end
    last = c
  end
  args[-1] = args[-1][/^(.*) -&gt;$/, 1]
  i = 2
  args = args.map do |a| 
    a.strip!    
    i += 1
    if a =~ /^\S+:/
      if a =~ /^\?/
        i += 1 
        "\$\{#{i - 1}:~#{a[/^\S+:/]}\$\{#{i}:#{e_sn(a[/:(.*)$/, 1])}\}}"
      else
        "~#{a[/^\S+:/]}\$\{#{i}:#{e_sn(a[/:(.*)$/, 1])}\}" 
      end
    else
      "\$\{#{i}:#{e_sn(a)}\}" 
    end
  end
  snippet = "#{funname} ${1:#{args.join(' ')}}".sub(stripregex, '')
  
  snippet
end


begin
  openmodules = OCamlCompletion.open_modules($contents)
  modulename, regex = extract_module_from_line
  modules = if modulename == '' then nil else [modulename] end
  possible_completions = OCamlCompletion::cmigrep(regex.source, :values, modules, openmodules).split(/\n/).select { |l| l =~ /^val\s+/ }.sort.uniq
  possible_completions = possible_completions.map do |c|
    chash = Hash.new
    chash['completion'] = c[/^val\s+(.*)/, 1]
  
    chash
  end

  plist = Hash.new
  plist['possibleCompletions'] = possible_completions

  cio = IO.popen("'#{ENV['TM_SUPPORT_PATH']}/bin/tm_dialog' -m '#{ENV['TM_BUNDLE_SUPPORT']}/nibs/CompletionsWindow.nib' | pl", 'r+')
  cio.puts(plist.to_plist)
  cio.close_write
  choice = PropertyList.load(cio.read)
  if !choice['returnButton'] || choice['returnButton'] != 'Cancel'
    selection = choice['result']['returnArgument'].to_i
    snippettxt = plist['possibleCompletions'][selection]['completion']
    print convert_to_snippet(snippettxt, regex)
  else
    print ""
  end
rescue
  print ""
end</string>
	<key>fallbackInput</key>
	<string>line</string>
	<key>input</key>
	<string>document</string>
	<key>keyEquivalent</key>
	<string>~	</string>
	<key>name</key>
	<string>Complete vals</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>source.ocaml</string>
	<key>uuid</key>
	<string>55235037-C23A-4B8D-8ECD-9ED5737DD0D5</string>
</dict>
</plist>
